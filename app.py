import streamlit as st
import pandas as pd
import plotly.express as px
import io
from pandas import ExcelWriter
from datetime import date
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json

# ---------------- CONFIGURACI√ìN INICIAL ----------------
st.set_page_config(page_title="Dashboard de Presupuesto", layout="wide")

# ---------------- AUTENTICACI√ìN ----------------
def autenticar():
    st.sidebar.title("üîê Autenticaci√≥n")
    usuario = st.sidebar.text_input("Usuario", value="", key="usuario")
    contrase√±a = st.sidebar.text_input("Contrase√±a", type="password", value="", key="contrase√±a")

    usuario_valido = st.secrets["auth"]["usuario"]
    contrase√±a_valida = st.secrets["auth"]["password"]

    if usuario == usuario_valido and contrase√±a == contrase√±a_valida:
        return True
    else:
        if usuario and contrase√±a:
            st.sidebar.error("‚ùå Usuario o contrase√±a incorrectos.")
        return False

if not autenticar():
    st.stop()

# ---------------- FUNCI√ìN PARA GUARDAR EN GOOGLE SHEETS ----------------
def guardar_en_google_sheets(datos: dict):
    scope = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    creds_dict = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    SHEET_ID = "1kVoN3RZgxaKeZ9Pe4RdaCg-5ugr37S8EKHVWhetG2Ao"
    sheet = client.open_by_key(SHEET_ID).sheet1
    fila = [
        datos["A√±o"], datos["Fecha"], datos["Categor√≠a"], datos["Subcategor√≠a"],
        datos["Concepto"], datos["Monto"], datos["Aplica IVA"], datos["IVA"], datos["Total c/IVA"]
    ]
    sheet.append_row(fila, value_input_option="USER_ENTERED")

# ---------------- TABS PRINCIPALES ----------------
tab1, tab2 = st.tabs(["üìä Dashboard Actual", "üóÉ Historial de Conceptos Guardados"])

# ---------------- TAB 1: DASHBOARD ACTUAL ----------------
with tab1:
    uploaded_file = st.file_uploader("üìÅ Cargar archivo CSV", type=["csv"])
    if uploaded_file is None:
        st.warning("üîÑ Por favor carga un archivo CSV para iniciar.")
        st.stop()

    df = pd.read_csv(uploaded_file)

    columnas_requeridas = {"A√±o", "Categor√≠a", "Subcategor√≠a", "Concepto", "Monto", "Aplica IVA"}
    if not columnas_requeridas.issubset(df.columns):
        st.error("‚ùå El archivo no tiene las columnas requeridas.")
        st.stop()

    if "IVA" not in df.columns:
        df["IVA"] = df.apply(lambda row: row["Monto"] * 0.16 if row["Aplica IVA"] == "S√≠" else 0, axis=1)

    if "Total c/IVA" not in df.columns:
        df["Total c/IVA"] = df["Monto"] + df["IVA"]

    if "Fecha" in df.columns:
        df["Fecha"] = pd.to_datetime(df["Fecha"])
        df["Mes"] = df["Fecha"].dt.to_period("M").astype(str)
    else:
        df["Fecha"] = pd.NaT
        df["Mes"] = "Sin Fecha"

    st.sidebar.markdown("### üìù Agregar nuevo concepto")
    with st.sidebar.form("formulario_concepto"):
        anio = st.number_input("A√±o", min_value=2000, max_value=2100, step=1, value=2025)
        fecha = st.date_input("Fecha del gasto", value=date.today())
        categoria = st.text_input("Categor√≠a")
        subcategoria = st.text_input("Subcategor√≠a")
        concepto = st.text_input("Nombre del concepto")
        monto = st.number_input("Monto", min_value=0.0, step=100.0)
        aplica_iva = st.selectbox("¬øAplica IVA?", ["S√≠", "No"])
        submitted = st.form_submit_button("‚ûï Agregar concepto")

    if submitted:
        if not categoria or not concepto or monto == 0:
            st.warning("‚ö†Ô∏è Por favor completa todos los campos obligatorios.")
        else:
            nuevo = {
                "A√±o": anio,
                "Fecha": fecha.strftime("%Y-%m-%d"),
                "Categor√≠a": categoria,
                "Subcategor√≠a": subcategoria,
                "Concepto": concepto,
                "Monto": monto,
                "Aplica IVA": aplica_iva,
            }
            nuevo["IVA"] = monto * 0.16 if aplica_iva == "S√≠" else 0
            nuevo["Total c/IVA"] = monto + nuevo["IVA"]
            df = pd.concat([df, pd.DataFrame([nuevo])], ignore_index=True)
            guardar_en_google_sheets(nuevo)
            st.success("‚úÖ Concepto agregado y guardado en Google Sheets")

    st.sidebar.markdown("### üîç Filtros")
    year = st.selectbox("A√±o", sorted(df["A√±o"].unique()))
    categoria_filtro = st.multiselect("Categor√≠a", df["Categor√≠a"].unique(), default=df["Categor√≠a"].unique())
    filtered_df = df[(df["A√±o"] == year) & (df["Categor√≠a"].isin(categoria_filtro))]

    st.markdown("### üìå Indicadores Clave")
    col1, col2, col3 = st.columns(3)
    col1.metric("üíº Total Presupuesto", f"${filtered_df['Monto'].sum():,.2f}")
    col2.metric("üßæ Total IVA", f"${filtered_df['IVA'].sum():,.2f}")
    col3.metric("üìä Total con IVA", f"${filtered_df['Total c/IVA'].sum():,.2f}")
    st.markdown("---")

    pastel_colors = px.colors.qualitative.Pastel

    st.subheader("üìà Distribuci√≥n por Subcategor√≠a")
    fig1 = px.pie(filtered_df, names="Subcategor√≠a", values="Total c/IVA", title="Total con IVA por Subcategor√≠a", color_discrete_sequence=pastel_colors)
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("üìä Comparativa por Categor√≠a")
    fig2 = px.bar(filtered_df, x="Categor√≠a", y="Total c/IVA", color="Categor√≠a", title="Totales con IVA por Categor√≠a", color_discrete_sequence=pastel_colors)
    st.plotly_chart(fig2, use_container_width=True)

    if "Fecha" in filtered_df.columns and pd.notnull(filtered_df["Fecha"]).any():
        st.subheader("üìÜ Evoluci√≥n del presupuesto por Mes")
        evolution_df = filtered_df.copy()
        evolution_df["Fecha"] = pd.to_datetime(evolution_df["Fecha"])
        evolution_df["Mes"] = evolution_df["Fecha"].dt.to_period("M").astype(str)
        fig3 = px.line(evolution_df.sort_values("Fecha"), x="Mes", y="Total c/IVA", color="Categor√≠a", markers=True, color_discrete_sequence=pastel_colors)
        st.plotly_chart(fig3, use_container_width=True)

    buffer = io.BytesIO()
    with ExcelWriter(buffer, engine='xlsxwriter') as writer:
        filtered_df.to_excel(writer, index=False, sheet_name="Presupuesto")

    st.download_button(
        label="‚¨á Descargar presupuesto filtrado en Excel",
        data=buffer.getvalue(),
        file_name="presupuesto_filtrado.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# ---------------- ALERTA POR SOBREPRESUPUESTO ----------------
st.markdown("### üö® Alertas por sobrepresupuesto")

# Puedes definir tus propios l√≠mites estimados aqu√≠
presupuesto_estimado = {
    "N√≥mina": 50000,
    "Servicios": 15000,
    "Mantenimiento": 10000,
    "Marketing": 8000,
    "Papeler√≠a": 3000,
    "Otros": 5000
}

categorias_alerta = []

for cat in filtered_df["Categor√≠a"].unique():
    gasto = filtered_df[filtered_df["Categor√≠a"] == cat]["Total c/IVA"].sum()
    limite = presupuesto_estimado.get(cat, None)

    if limite and gasto > limite:
        categorias_alerta.append((cat, gasto, limite))

if categorias_alerta:
    for cat, gasto, limite in categorias_alerta:
        st.error(f"üî¥ ¬°Atenci√≥n! La categor√≠a **{cat}** ha excedido su l√≠mite. Gastado: ${gasto:,.2f} / L√≠mite: ${limite:,.2f}")
else:
    st.success("‚úÖ Todas las categor√≠as est√°n dentro del presupuesto estimado.")


# ---------------- TAB 2: HISTORIAL ----------------
with tab2:
    st.header("üìÅ Historial de Conceptos Guardados")
    try:
        scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        creds_dict = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        sheet_hist = client.open_by_key("1AL2lrmiaCg77ZTLBOrwEctUhwjT1iZ60AferLPDoQYQ").worksheet("Hist√≥rico_diario")
        data_hist = sheet_hist.get_all_records()
        df_hist = pd.DataFrame(data_hist)

        if not df_hist.empty:
            col1, col2 = st.columns(2)
            with col1:
                year_hist = st.selectbox("Filtrar por A√±o", sorted(df_hist["A√±o"].unique()), key="hist_anio")
            with col2:
                categorias = df_hist["Categor√≠a"].unique().tolist()
                categoria_hist = st.multiselect("Filtrar por Categor√≠a", categorias, default=categorias, key="hist_cat")

            df_filtrado = df_hist[(df_hist["A√±o"] == year_hist) & (df_hist["Categor√≠a"].isin(categoria_hist))]
            st.dataframe(df_filtrado, use_container_width=True)

            fig_hist = px.bar(df_filtrado, x="Categor√≠a", y="Total c/IVA", color="Categor√≠a", title="Totales por Categor√≠a en el Historial")
            st.plotly_chart(fig_hist, use_container_width=True)
        else:
            st.info("‚ö†Ô∏è A√∫n no hay datos en el historial.")

    except Exception as e:
        st.error(f"‚ùå Error al cargar el historial: {e}")

# ---------------- BOT√ìN PARA EXPORTAR A PDF ----------------
st.markdown("""
    <br>
    <button onclick="window.print()" style="
        padding: 10px 20px;
        font-size: 16px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    ">üñ®Ô∏è Exportar Dashboard como PDF</button>
""", unsafe_allow_html=True)


from datetime import datetime, timedelta

# Detectar fechas de pago pr√≥ximas
hoy = datetime.today().date()
proximos_dias = hoy + timedelta(days=5)

if "Fecha de Pago" in df.columns:
    df["Fecha de Pago"] = pd.to_datetime(df["Fecha de Pago"], errors='coerce').dt.date
    alertas = df[df["Fecha de Pago"].between(hoy, proximos_dias)]

    if not alertas.empty:
        st.warning("üîî Hay conceptos con fecha de pago cercana:")
        for i, row in alertas.iterrows():
            st.write(f"‚û°Ô∏è **{row['Concepto']}** de la categor√≠a *{row['Categor√≠a']}* vence el **{row['Fecha de Pago']}** por **${row['Monto']:.2f}**.")

